#version 450

layout(local_size_x = 64, local_size_y = 64, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba32f) uniform restrict readonly image2D src;
layout(set = 0, binding = 1, rgba32f) uniform restrict writeonly image2D dst;

layout(set = 1, binding = 0) uniform Params
{
  ivec2 src_offset;
  ivec2 dst_offset;
  ivec2 extent;
  ivec2 radius;
}
params;

ivec2 imclamp(ivec2 x)
{
  // TODO(lamarrr): which extent? src or dst?
  return clamp(x, ivec2(0, 0), params.extent);
}

vec4 downsample(ivec2 uv, ivec2 radius)
{
  vec4 sum = imageLoad(src, uv) * vec4(4.0);
  sum += imageLoad(src, imclamp(uv + radius));
  sum += imageLoad(src, imclamp(uv - radius));
  sum += imageLoad(src, imclamp(uv + ivec2(radius.x, -radius.y)));
  sum += imageLoad(src, imclamp(uv + ivec2(-radius.x, radius.y)));
  return sum / 8.0;
}

vec4 upsample(ivec2 uv, ivec2 radius)
{
  vec4 sum = imageLoad(src, imclamp(uv + ivec2(-radius.x * 2, 0)));
  sum += imageLoad(src, imclamp(uv + ivec2(-radius.x, radius.y))) * 2.0;
  sum += imageLoad(src, imclamp(uv + ivec2(0, radius.y * 2)));
  sum += imageLoad(src, imclamp(uv + ivec2(radius.x, radius.y))) * 2.0;
  sum += imageLoad(src, imclamp(uv + ivec2(radius.x * 2, 0)));
  sum += imageLoad(src, imclamp(uv + ivec2(radius.x, -radius.y))) * 2.0;
  sum += imageLoad(src, imclamp(uv + ivec2(0, -radius.y * 2)));
  sum += imageLoad(src, imclamp(uv + ivec2(-radius.x, -radius.y))) * 2.0;
  return sum / 12.0;
}

void main()
{
#if UPSAMPLE
  imageStore(dst, params.dst_offset + ivec2(gl_GlobalInvocationID.xy),
             upsample(params.src_offset + ivec2(gl_GlobalInvocationID.xy),
                      params.radius));
#else
  imageStore(dst, params.dst_offset + ivec2(gl_GlobalInvocationID.xy),
             downsample(params.src_offset + ivec2(gl_GlobalInvocationID.xy),
                        params.radius));
#endif
}
